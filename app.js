// app.js - Versi√≥n DEFINITIVA sin bucles
console.log('üîß app.js iniciado - Redirecci√≥n inteligente');

// Bandera GLOBAL para evitar m√∫ltiples ejecuciones
if (window.redirectCompleted) {
    console.log('‚è© Redirecci√≥n ya completada - Evitando re-ejecuci√≥n');
} else {
    window.redirectCompleted = true;
    
    async function smartDynamicRedirect() {
        console.log('üîÑ Iniciando proceso de redirecci√≥n...');
        
        try {
            // Actualizar UI inmediatamente
            if (document.getElementById('status')) {
                document.getElementById('status').textContent = 'Estado: Obteniendo URL actualizada...';
            }
            
            // Leer URL din√°mica de GitHub (con cache-busting)
            const timestamp = Date.now();
            const githubUrl = `https://raw.githubusercontent.com/palmace/palmace.github.io/main/url.txt?t=${timestamp}`;
            
            console.log('üì° Conectando a GitHub...', githubUrl);
            const response = await fetch(githubUrl);
            
            if (!response.ok) {
                throw new Error(`Error HTTP ${response.status}`);
            }
            
            const tunnelURL = (await response.text()).trim();
            console.log('üåê URL obtenida:', tunnelURL);
            
            // Validaci√≥n robusta de la URL
            if (tunnelURL && 
                tunnelURL.startsWith('https://') && 
                tunnelURL.includes('.trycloudflare.com') &&
                tunnelURL.length > 30) {
                
                console.log('‚úÖ URL v√°lida detectada');
                
                // Actualizar UI
                if (document.getElementById('status')) {
                    document.getElementById('status').textContent = 'Estado: Redirigiendo...';
                    document.getElementById('currentUrl').textContent = `Destino: ${tunnelURL}`;
                }
                
                // Redirigir despu√©s de breve pausa visual
                setTimeout(() => {
                    console.log('üöÄ Ejecutando redirecci√≥n final');
                    // Usar location.replace() para NO guardar en historial
                    window.location.replace(tunnelURL);
                }, 1500);
                
            } else {
                throw new Error(`URL inv√°lida o mal formada: "${tunnelURL}"`);
            }
            
        } catch (error) {
            console.error('‚ùå Error en redirecci√≥n:', error);
            
            // Mostrar error en UI
            if (document.getElementById('status')) {
                document.getElementById('status').textContent = 'Estado: Error - Reconectando...';
                document.getElementById('currentUrl').textContent = `Error: ${error.message}`;
            }
            
            // Recargar despu√©s de 5 segundos (solo si a√∫n estamos en palmace.github.io)
            setTimeout(() => {
                if (window.location.href.includes('palmace.github.io')) {
                    console.log('üîÑ Recargando p√°gina...');
                    window.location.reload();
                }
            }, 5000);
        }
    }
    
    // Control de ejecuci√≥n - Solo ejecutar si estamos en la p√°gina principal
    if (window.location.href === 'https://palmace.github.io/' || 
        window.location.href === 'https://palmace.github.io' ||
        window.location.href.includes('palmace.github.io/index')) {
        
        // Esperar a que el DOM est√© listo
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', smartDynamicRedirect);
        } else {
            smartDynamicRedirect();
        }
        
    } else {
        console.log('üìç No en p√°gina principal - No redirigir');
    }
}
